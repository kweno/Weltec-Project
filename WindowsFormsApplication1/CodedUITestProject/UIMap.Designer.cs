// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Closing
        /// </summary>
        public void Closing()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIReleaseWindow.UIItemWindow.UIClientApplicationexeListItem.UINameEdit;
            WinButton uICloseButton = this.UIDatabaseEvaluatorWindow.UICloseWindow.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(110, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(45, 19));
        }
        
        #region Properties
        public UIReleaseWindow UIReleaseWindow
        {
            get
            {
                if ((this.mUIReleaseWindow == null))
                {
                    this.mUIReleaseWindow = new UIReleaseWindow();
                }
                return this.mUIReleaseWindow;
            }
        }
        
        public UIDatabaseEvaluatorWindow UIDatabaseEvaluatorWindow
        {
            get
            {
                if ((this.mUIDatabaseEvaluatorWindow == null))
                {
                    this.mUIDatabaseEvaluatorWindow = new UIDatabaseEvaluatorWindow();
                }
                return this.mUIDatabaseEvaluatorWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRunningapplicationsWindow UIRunningapplicationsWindow
        {
            get
            {
                if ((this.mUIRunningapplicationsWindow == null))
                {
                    this.mUIRunningapplicationsWindow = new UIRunningapplicationsWindow();
                }
                return this.mUIRunningapplicationsWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIReleaseWindow mUIReleaseWindow;
        
        private UIDatabaseEvaluatorWindow mUIDatabaseEvaluatorWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIRunningapplicationsWindow mUIRunningapplicationsWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIReleaseWindow : WinWindow
    {
        
        public UIReleaseWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Release";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public UIClientApplicationexeListItem UIClientApplicationexeListItem
        {
            get
            {
                if ((this.mUIClientApplicationexeListItem == null))
                {
                    this.mUIClientApplicationexeListItem = new UIClientApplicationexeListItem(this);
                }
                return this.mUIClientApplicationexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClientApplicationexeListItem mUIClientApplicationexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIClientApplicationexeListItem : WinListItem
    {
        
        public UIClientApplicationexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "ClientApplication.exe";
            this.WindowTitles.Add("Release");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Release");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatabaseEvaluatorWindow : WinWindow
    {
        
        public UIDatabaseEvaluatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Database Evaluator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Database Evaluator");
            #endregion
        }
        
        #region Properties
        public UIServer_ComboBoxWindow UIServer_ComboBoxWindow
        {
            get
            {
                if ((this.mUIServer_ComboBoxWindow == null))
                {
                    this.mUIServer_ComboBoxWindow = new UIServer_ComboBoxWindow(this);
                }
                return this.mUIServer_ComboBoxWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDatabaseNameWindow UIDatabaseNameWindow
        {
            get
            {
                if ((this.mUIDatabaseNameWindow == null))
                {
                    this.mUIDatabaseNameWindow = new UIDatabaseNameWindow(this);
                }
                return this.mUIDatabaseNameWindow;
            }
        }
        
        public UIDatabase_TableLayoutWindow UIDatabase_TableLayoutWindow
        {
            get
            {
                if ((this.mUIDatabase_TableLayoutWindow == null))
                {
                    this.mUIDatabase_TableLayoutWindow = new UIDatabase_TableLayoutWindow(this);
                }
                return this.mUIDatabase_TableLayoutWindow;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIServer_ComboBoxWindow mUIServer_ComboBoxWindow;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIDatabaseNameWindow mUIDatabaseNameWindow;
        
        private UIDatabase_TableLayoutWindow mUIDatabase_TableLayoutWindow;
        
        private UICloseWindow mUICloseWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIServer_ComboBoxWindow : WinWindow
    {
        
        public UIServer_ComboBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Server_ComboBox";
            this.WindowTitles.Add("Database Evaluator");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIServer_ComboBoxComboBox
        {
            get
            {
                if ((this.mUIServer_ComboBoxComboBox == null))
                {
                    this.mUIServer_ComboBoxComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIServer_ComboBoxComboBox.WindowTitles.Add("Database Evaluator");
                    #endregion
                }
                return this.mUIServer_ComboBoxComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIServer_ComboBoxComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Database Evaluator");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Database Evaluator");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatabaseNameWindow : WinWindow
    {
        
        public UIDatabaseNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "DatabaseName_CheckBox";
            this.WindowTitles.Add("Database Evaluator");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDatabaseNameCheckBox
        {
            get
            {
                if ((this.mUIDatabaseNameCheckBox == null))
                {
                    this.mUIDatabaseNameCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDatabaseNameCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Database Name:";
                    this.mUIDatabaseNameCheckBox.WindowTitles.Add("Database Evaluator");
                    #endregion
                }
                return this.mUIDatabaseNameCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDatabaseNameCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatabase_TableLayoutWindow : WinWindow
    {
        
        public UIDatabase_TableLayoutWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Database_TableLayoutPanel";
            this.WindowTitles.Add("Database Evaluator");
            #endregion
        }
        
        #region Properties
        public WinClient UIDatabase_TableLayoutClient
        {
            get
            {
                if ((this.mUIDatabase_TableLayoutClient == null))
                {
                    this.mUIDatabase_TableLayoutClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIDatabase_TableLayoutClient.WindowTitles.Add("Database Evaluator");
                    #endregion
                }
                return this.mUIDatabase_TableLayoutClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDatabase_TableLayoutClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Close_Button";
            this.WindowTitles.Add("Database Evaluator");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Database Evaluator");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinClient UISplashScreen_FormClient
        {
            get
            {
                if ((this.mUISplashScreen_FormClient == null))
                {
                    this.mUISplashScreen_FormClient = new WinClient(this);
                }
                return this.mUISplashScreen_FormClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISplashScreen_FormClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRunningapplicationsWindow : WinWindow
    {
        
        public UIRunningapplicationsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Running applications";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSTaskSwWClass";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public UIRunningapplicationsClient UIRunningapplicationsClient
        {
            get
            {
                if ((this.mUIRunningapplicationsClient == null))
                {
                    this.mUIRunningapplicationsClient = new UIRunningapplicationsClient(this);
                }
                return this.mUIRunningapplicationsClient;
            }
        }
        #endregion
        
        #region Fields
        private UIRunningapplicationsClient mUIRunningapplicationsClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRunningapplicationsClient : WinClient
    {
        
        public UIRunningapplicationsClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Running applications";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public WinToolBar UIRunningapplicationsToolBar
        {
            get
            {
                if ((this.mUIRunningapplicationsToolBar == null))
                {
                    this.mUIRunningapplicationsToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIRunningapplicationsToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Running applications";
                    this.mUIRunningapplicationsToolBar.WindowTitles.Add("Running applications");
                    #endregion
                }
                return this.mUIRunningapplicationsToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIRunningapplicationsToolBar;
        #endregion
    }
}
